<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>LightSaber</title><link href="http://haginara.github.io/" rel="alternate"></link><link href="http://haginara.github.io/feeds/all.atom.xml" rel="self"></link><id>http://haginara.github.io/</id><updated>2016-07-05T00:00:00-07:00</updated><entry><title>Install Asus PCE-N53 Driver for Ubuntu 14.04</title><link href="http://haginara.github.io/posts/2016/07/install-asus-pce--n53-driver-for-ubuntu-14.04/" rel="alternate"></link><published>2016-07-05T00:00:00-07:00</published><author><name>haginara</name></author><id>tag:haginara.github.io,2016-07-05:posts/2016/07/install-asus-pce--n53-driver-for-ubuntu-14.04/</id><summary type="html">&lt;p&gt;When I bought the asus wireless NIC, My dekstop was using the Windows.
but recently I changed to Ubuntu 14.04 Dekstop. The hell of the WIRELESS was started from that time.&lt;/p&gt;
&lt;p&gt;The driver which provided by Asus is not supported to Kernel 3.x version. I found the patched version from the github.com&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unused/patched-Asus-PCE-N53-linux-driver" title="https://github.com/unused/patched-Asus-PCE-N53-linux-driver"&gt;https://github.com/unused/patched-Asus-PCE-N53-linux-driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download the files, and run command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo make &amp;amp;&amp;amp; sudo make instal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This commands are only accepted to current session. After reboot the computer, you will have to enabled the driver again.&lt;/p&gt;
&lt;p&gt;Add the &lt;strong&gt;ifconfig ra0 up&lt;/strong&gt; to the &lt;strong&gt;/etc/rc.local&lt;/strong&gt; and add &lt;strong&gt;rt5592sta&lt;/strong&gt; to the &lt;strong&gt;/etc/modules&lt;/strong&gt;&lt;/p&gt;</summary><category term="ubuntu"></category><category term="pce-n53"></category><category term="asus"></category><category term="wlan"></category></entry><entry><title>Suricata IDS on Ubuntu Server</title><link href="http://haginara.github.io/posts/2016/07/suricata-ids-on-ubuntu-server/" rel="alternate"></link><published>2016-07-05T00:00:00-07:00</published><author><name>haginara</name></author><id>tag:haginara.github.io,2016-07-05:posts/2016/07/suricata-ids-on-ubuntu-server/</id><summary type="html">&lt;h3&gt;TOC&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Suricata 설치하기&lt;/li&gt;
&lt;li&gt;Suricata 관리하기&lt;/li&gt;
&lt;li&gt;ELK 로 Suricata 로그 관리&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Suricata 설치하기&lt;/h3&gt;
&lt;h4&gt;suricata repository 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Stable&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:oisf/suricata-stable
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install suricata
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Beta&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:oisf/suricata-beta
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install suricata
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Daily Release&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:oisf/suricata-daily
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install suricata
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Interface card 설정 하기&lt;/h4&gt;
&lt;p&gt;Network interface file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo vim /etc/network/interfaces&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;아래 내용을 추가한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;auto eth1&lt;/span&gt;
&lt;span class="x"&gt;iface eth1 inet manual&lt;/span&gt;
&lt;span class="x"&gt;up ifconfig &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IFACE&lt;/span&gt;&lt;span class="x"&gt; 0.0.0.0 up&lt;/span&gt;
&lt;span class="x"&gt;up ip link set &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IFACE&lt;/span&gt;&lt;span class="x"&gt; promisc on&lt;/span&gt;
&lt;span class="x"&gt;down ip link set &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IFACE&lt;/span&gt;&lt;span class="x"&gt; promisc off&lt;/span&gt;
&lt;span class="x"&gt;down ifconfig &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IFACE&lt;/span&gt;&lt;span class="x"&gt; down&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;로그 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;eve.json&lt;/li&gt;
&lt;li&gt;fast.log&lt;/li&gt;
&lt;li&gt;http.log&lt;/li&gt;
&lt;li&gt;stats.log&lt;/li&gt;
&lt;li&gt;unified2.alert.1437460553&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Suricata 관리하기&lt;/h3&gt;
&lt;h4&gt;oinkmaster&lt;/h4&gt;
&lt;h4&gt;pulledpork&lt;/h4&gt;
&lt;h4&gt;py-idstools&lt;/h4&gt;
&lt;p&gt;Sample Command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo idstools-rulecat --rules-dir /etc/suricata/rules/ --sid-msg-map /etc/suricata/rules/sid-msg.map --disable disable.conf --post-hook &lt;span class="s2"&gt;&amp;quot;/etc/init.d/suricata restart&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;인자 설명&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;rules-dir : 룰 폴더의 경로&lt;/li&gt;
&lt;li&gt;sid-msg-map: sid-msg.map 파일의 경로&lt;/li&gt;
&lt;li&gt;disable: 사용하지 않을 룰의 sid를 가지고 있는 파일  &lt;/li&gt;
&lt;li&gt;disable 파일의 경우 &lt;strong&gt;룰번호/n&lt;/strong&gt; 형태로 파일을 작성 할 수 있다.&lt;/li&gt;
&lt;li&gt;post-hook: 룰이 변경됬을 경우 실행할 명렁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;해당 명령은 &lt;strong&gt;cronjob&lt;/strong&gt;에 추가 할수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/cron.hourly/rulecat.hourly
### Adding the command to rulecat.houly file
#!/bin/bash

/usr/local/bin/idstools-rulecat  --rules-dir /etc/suricata/rules/ --sid-msg-map /etc/suricata/rules/sid-msg.map --disable disable.conf --post-hook &amp;quot;/etc/init.d/suricata restart&amp;quot;

### Adding the execution permission to this file
sudo chmod 755 /etc/cron.hourly/rulecat.hourly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Result&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Last download less than &lt;span class="m"&gt;15&lt;/span&gt; minutes ago. Not fetching.
Loaded &lt;span class="m"&gt;21320&lt;/span&gt; rules.
Disabled &lt;span class="m"&gt;48&lt;/span&gt; rules.
Enabled &lt;span class="m"&gt;0&lt;/span&gt; rules.
Modified &lt;span class="m"&gt;0&lt;/span&gt; rules.
Enabled &lt;span class="m"&gt;86&lt;/span&gt; rules &lt;span class="k"&gt;for&lt;/span&gt; flowbit dependencies.
Writing rule files to /etc/suricata/rules/.
Writing /etc/suricata/rules/sid-msg.map.
Running post-hook as output has been modified.
Running /etc/init.d/suricata restart.
Stopping suricata:  &lt;span class="k"&gt;done&lt;/span&gt;.
Starting suricata in IDS &lt;span class="o"&gt;(&lt;/span&gt;af-packet&lt;span class="o"&gt;)&lt;/span&gt; mode... &lt;span class="k"&gt;done&lt;/span&gt;.
Done.
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ubuntu"></category><category term="ids"></category><category term="suricata"></category></entry><entry><title>Using the let's encrypt for Nginx</title><link href="http://haginara.github.io/posts/2016/07/using-the-lets-encrypt-for-nginx/" rel="alternate"></link><published>2016-07-01T00:00:00-07:00</published><author><name>haginara</name></author><id>tag:haginara.github.io,2016-07-01:posts/2016/07/using-the-lets-encrypt-for-nginx/</id><summary type="html">&lt;h1&gt;사전 정보&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Web Service: Nginx&lt;/li&gt;
&lt;li&gt;Service port: 80(http) / 443(https)&lt;/li&gt;
&lt;li&gt;letsencrypt folder: /opt/letsencrypt&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;인증서 얻기&lt;/h1&gt;
&lt;h2&gt;Client 다운로드&lt;/h2&gt;
&lt;p&gt;인증서를 얻기 위하여 별도의 letsencyrpt 클라이언트 프로그램을 다운 받아야 한다. 
해당 클라이언트는 웹서비스를 하고 있는 대상 서버에 다운을 받는다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /opt
git clone https://github.com/letsencrypt/letsencrypt
cd letsencrypt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;사용하고 있는 웹서비스 종료 후 인증서 받기&lt;/h2&gt;
&lt;p&gt;인증서를 받기 위하여 자체적으로 혹은 기존 사용하고 있는 웹서비스를 이용하여 인증서를 받는다.
여기서는 기존 서비스를 이용하지않고 클라이언트에서 자체 지원하는 standalone 방식으로 인증서를 받을 예정이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service nginx stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;letsencrypt-auto 이용하여 인증서 얻기&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./letsencrypt-auto certonly --standalone -d www.haginara.net -d cloud.haginara.net -d blog.haginara.net -d wiki.haginara.net -d kanban.haginara.net -d git.haginara.net 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;인증서를 받은 후에는 아래와 같은 축하 메시지를 받게 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/www.haginara.net/fullchain.pem. Your cert
   will expire on 2016-03-02. To obtain a new version of the
   certificate in the future, simply run Let&amp;#39;s Encrypt again.
 - If like Let&amp;#39;s Encrypt, please consider supporting our work by:

   Donating to ISRG / Let&amp;#39;s Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위 안내문에서 보듯이 /etc/letsencrypt/live 하위 폴더에 인증서가 위치하게 된다.&lt;/p&gt;
&lt;h2&gt;설정 파일 사용하여 인증서 얻기&lt;/h2&gt;
&lt;p&gt;위와 같이 파라미터를 이용하여 인증서를 받을수도 있지만 별도의 설장파일을 만들어 두고 사용 하여도된다.&lt;/p&gt;
&lt;p&gt;cli.ini&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa-key-size = 4096
domains = www.haginara.net, blog.haginara.net, wiki.haginara.net, git.haginara.net, git.haginara.net, cloud.haginara.net
authenticator = standalone
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./letsencrypt-auto certonly --config cli.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Nginx 서비스에 인증서 적용&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssl_certificate     /etc/letsencrypt/live/www.haginara.net/fullchain.pem
ssl_certificate_ke  /etc/letsencrypt/live/www.haginara.net/privkey.pem
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;기존 웹서비스 실행&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;정리&lt;/h1&gt;
&lt;p&gt;위 작업을 하나의 스크립트로 만들어 보았다.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;INI_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/letsencrypt/cli.ini
&lt;span class="nv"&gt;NGINX_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/nginx.pid

service nginx stop
sleep 2
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="nv"&gt;$NGINX_PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    service nginx restart
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/letsencrypt
    ./letsencrypt-auto certonly --config &lt;span class="nv"&gt;$INI_PATH&lt;/span&gt;
    service nginx start
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;위 스크립트는 이후 인증서 갱신시 크론잡에서 호출 할 예정이다.&lt;/p&gt;
&lt;h1&gt;인증서 갱신&lt;/h1&gt;
&lt;p&gt;Let's Encrypt 인증서의 경우 만료기간이 90일이다. 따라서 매 90일 마다 인증서 갱신을 해주어야 한다.&lt;/p&gt;
&lt;p&gt;인증서 갱신은 기존 인증서를 새로 발급 받는 절차와 동일하다 단지 이 작업을 90일마다(인증서 만료전) 실행 해 주기위하여 Cronjob으로 설정할 에정이다.&lt;/p&gt;
&lt;h2&gt;Cron-job&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo crontab -e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;아래와 같이 크론잡을 설정 해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;30 03 01 */3 * /opt/letsencrypt/letsencrypt-cron
&lt;/pre&gt;&lt;/div&gt;</summary><category term="letsencrypt"></category><category term="nginx"></category></entry><entry><title>Welcome</title><link href="http://haginara.github.io/posts/2016/07/welcome/" rel="alternate"></link><published>2016-07-01T00:00:00-07:00</published><author><name>haginara</name></author><id>tag:haginara.github.io,2016-07-01:posts/2016/07/welcome/</id><summary type="html">&lt;p&gt;This is the welcome page for haginara.github.io&lt;/p&gt;</summary><category term="Pelican"></category><category term="publishing"></category></entry></feed>